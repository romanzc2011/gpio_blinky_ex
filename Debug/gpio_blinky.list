
gpio_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000534  0800053c  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000534  08000534  0000153c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000534  08000534  0000153c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000534  0800053c  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000534  08000534  00001534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000538  08000538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000153c  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a7d  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001dc  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000021c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000051  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001814f  00000000  00000000  00002291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000774  00000000  00000000  0001a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088394  00000000  00000000  0001ab54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a2ee8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000124  00000000  00000000  000a2f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a3050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800051c 	.word	0x0800051c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800051c 	.word	0x0800051c

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:

__IO uint8_t counter = 0;
__IO uint8_t pressed = 0;

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 800025c:	4b19      	ldr	r3, [pc, #100]	@ (80002c4 <main+0x6c>)
 800025e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000260:	4a18      	ldr	r2, [pc, #96]	@ (80002c4 <main+0x6c>)
 8000262:	f043 0309 	orr.w	r3, r3, #9
 8000266:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000268:	4b16      	ldr	r3, [pc, #88]	@ (80002c4 <main+0x6c>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a15      	ldr	r2, [pc, #84]	@ (80002c4 <main+0x6c>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA_Init();
 8000274:	f000 f82e 	bl	80002d4 <GPIOA_Init>
	GPIOD_Init();
 8000278:	f000 f848 	bl	800030c <GPIOD_Init>
	TIM4_Init();
 800027c:	f000 f88c 	bl	8000398 <TIM4_Init>

	while(1) {
		// Turn off LED15 if interrupt happened
		if ((GPIOD->ODR & (1U << LED15)) != 0) {
 8000280:	4b11      	ldr	r3, [pc, #68]	@ (80002c8 <main+0x70>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000288:	2b00      	cmp	r3, #0
 800028a:	d005      	beq.n	8000298 <main+0x40>
			GPIOD->ODR &= ~(1U << LED15);
 800028c:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0x70>)
 800028e:	695b      	ldr	r3, [r3, #20]
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <main+0x70>)
 8000292:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000296:	6153      	str	r3, [r2, #20]
		}

		// Press button and debounce
		if (pressed) {
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <main+0x74>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0ee      	beq.n	8000280 <main+0x28>
			GPIOD->ODR ^= (1U << LED13);
 80002a2:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <main+0x70>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a08      	ldr	r2, [pc, #32]	@ (80002c8 <main+0x70>)
 80002a8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80002ac:	6153      	str	r3, [r2, #20]
			pressed = 0;
 80002ae:	4b07      	ldr	r3, [pc, #28]	@ (80002cc <main+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	701a      	strb	r2, [r3, #0]
			while ((GPIOA->IDR & (1U << PA0)) != 0);
 80002b4:	bf00      	nop
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <main+0x78>)
 80002b8:	691b      	ldr	r3, [r3, #16]
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d1f9      	bne.n	80002b6 <main+0x5e>
		if ((GPIOD->ODR & (1U << LED15)) != 0) {
 80002c2:	e7dd      	b.n	8000280 <main+0x28>
 80002c4:	40023800 	.word	0x40023800
 80002c8:	40020c00 	.word	0x40020c00
 80002cc:	2000001d 	.word	0x2000001d
 80002d0:	40020000 	.word	0x40020000

080002d4 <GPIOA_Init>:
	}
}

/* PA0 input with pull down */
static void GPIOA_Init(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3UL << (PA0 * 2));
 80002d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000308 <GPIOA_Init+0x34>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <GPIOA_Init+0x34>)
 80002de:	f023 0303 	bic.w	r3, r3, #3
 80002e2:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR &= ~(3UL << (PA0 * 2));
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <GPIOA_Init+0x34>)
 80002e6:	68db      	ldr	r3, [r3, #12]
 80002e8:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <GPIOA_Init+0x34>)
 80002ea:	f023 0303 	bic.w	r3, r3, #3
 80002ee:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (2UL << (PA0 * 2));
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <GPIOA_Init+0x34>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <GPIOA_Init+0x34>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	60d3      	str	r3, [r2, #12]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40020000 	.word	0x40020000

0800030c <GPIOD_Init>:

/* PD15 output push-pull, low speed, no pull */
static void GPIOD_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
    /* MODER: 01 = output for PD15 */
    GPIOD->MODER &= ~(3UL << (LED13 * 2));
 8000310:	4b20      	ldr	r3, [pc, #128]	@ (8000394 <GPIOD_Init+0x88>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a1f      	ldr	r2, [pc, #124]	@ (8000394 <GPIOD_Init+0x88>)
 8000316:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800031a:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (1UL << (LED13 * 2));
 800031c:	4b1d      	ldr	r3, [pc, #116]	@ (8000394 <GPIOD_Init+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a1c      	ldr	r2, [pc, #112]	@ (8000394 <GPIOD_Init+0x88>)
 8000322:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000326:	6013      	str	r3, [r2, #0]

    /* Push-pull: clear bit 15 in OTYPER */
    GPIOD->OTYPER &= ~(1UL << LED13);
 8000328:	4b1a      	ldr	r3, [pc, #104]	@ (8000394 <GPIOD_Init+0x88>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a19      	ldr	r2, [pc, #100]	@ (8000394 <GPIOD_Init+0x88>)
 800032e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000332:	6053      	str	r3, [r2, #4]

    /* Low speed */
    GPIOD->OSPEEDR &= ~(3UL << (LED13 * 2));
 8000334:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <GPIOD_Init+0x88>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	4a16      	ldr	r2, [pc, #88]	@ (8000394 <GPIOD_Init+0x88>)
 800033a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800033e:	6093      	str	r3, [r2, #8]

    /* No pull */
    GPIOD->PUPDR &= ~(3UL << (LED13 * 2));
 8000340:	4b14      	ldr	r3, [pc, #80]	@ (8000394 <GPIOD_Init+0x88>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a13      	ldr	r2, [pc, #76]	@ (8000394 <GPIOD_Init+0x88>)
 8000346:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800034a:	60d3      	str	r3, [r2, #12]

    // PD15  <-- add this block
	GPIOD->MODER   &= ~(3UL << (LED15 * 2));
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <GPIOD_Init+0x88>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIOD_Init+0x88>)
 8000352:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000356:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED15 * 2));
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <GPIOD_Init+0x88>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0d      	ldr	r2, [pc, #52]	@ (8000394 <GPIOD_Init+0x88>)
 800035e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000362:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED15);
 8000364:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <GPIOD_Init+0x88>)
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <GPIOD_Init+0x88>)
 800036a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800036e:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED15 * 2));
 8000370:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <GPIOD_Init+0x88>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	4a07      	ldr	r2, [pc, #28]	@ (8000394 <GPIOD_Init+0x88>)
 8000376:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800037a:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED15 * 2));
 800037c:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <GPIOD_Init+0x88>)
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	4a04      	ldr	r2, [pc, #16]	@ (8000394 <GPIOD_Init+0x88>)
 8000382:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000386:	60d3      	str	r3, [r2, #12]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40020c00 	.word	0x40020c00

08000398 <TIM4_Init>:

static void TIM4_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	TIM4->CR1 &= ~TIM_CR1_CEN;  // Disable timer clock                                                                                                             z
 800039c:	4b19      	ldr	r3, [pc, #100]	@ (8000404 <TIM4_Init+0x6c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a18      	ldr	r2, [pc, #96]	@ (8000404 <TIM4_Init+0x6c>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6013      	str	r3, [r2, #0]
	TIM4->ARR = 59999 - 1;
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <TIM4_Init+0x6c>)
 80003aa:	f64e 225e 	movw	r2, #59998	@ 0xea5e
 80003ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 6;
 80003b0:	4b14      	ldr	r3, [pc, #80]	@ (8000404 <TIM4_Init+0x6c>)
 80003b2:	2206      	movs	r2, #6
 80003b4:	629a      	str	r2, [r3, #40]	@ 0x28

	TIM4->CR1 &= ~TIM_CR1_DIR;
 80003b6:	4b13      	ldr	r3, [pc, #76]	@ (8000404 <TIM4_Init+0x6c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a12      	ldr	r2, [pc, #72]	@ (8000404 <TIM4_Init+0x6c>)
 80003bc:	f023 0310 	bic.w	r3, r3, #16
 80003c0:	6013      	str	r3, [r2, #0]
	TIM4->CR1 &= ~TIM_CR1_OPM;
 80003c2:	4b10      	ldr	r3, [pc, #64]	@ (8000404 <TIM4_Init+0x6c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000404 <TIM4_Init+0x6c>)
 80003c8:	f023 0308 	bic.w	r3, r3, #8
 80003cc:	6013      	str	r3, [r2, #0]

	TIM4->DIER |= TIM_DIER_UIE;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000404 <TIM4_Init+0x6c>)
 80003d0:	68db      	ldr	r3, [r3, #12]
 80003d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <TIM4_Init+0x6c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	60d3      	str	r3, [r2, #12]
	TIM4->EGR = TIM_EGR_UG;
 80003da:	4b0a      	ldr	r3, [pc, #40]	@ (8000404 <TIM4_Init+0x6c>)
 80003dc:	2201      	movs	r2, #1
 80003de:	615a      	str	r2, [r3, #20]
	TIM4->SR = 0;
 80003e0:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <TIM4_Init+0x6c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]

	NVIC_EnableIRQ(TIM4_IRQn);   // Enabling the TIM4 interrupt handler
 80003e6:	201e      	movs	r0, #30
 80003e8:	f7ff feee 	bl	80001c8 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM4_IRQn, 15);
 80003ec:	210f      	movs	r1, #15
 80003ee:	201e      	movs	r0, #30
 80003f0:	f7ff ff08 	bl	8000204 <__NVIC_SetPriority>

	TIM4->CR1 |= TIM_CR1_CEN;
 80003f4:	4b03      	ldr	r3, [pc, #12]	@ (8000404 <TIM4_Init+0x6c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a02      	ldr	r2, [pc, #8]	@ (8000404 <TIM4_Init+0x6c>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6013      	str	r3, [r2, #0]
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40000800 	.word	0x40000800

08000408 <TIM4_IRQHandler>:

/* TIM4 Interrupt handler */
void TIM4_IRQHandler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 800040c:	4b17      	ldr	r3, [pc, #92]	@ (800046c <TIM4_IRQHandler+0x64>)
 800040e:	691b      	ldr	r3, [r3, #16]
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	2b00      	cmp	r3, #0
 8000416:	d024      	beq.n	8000462 <TIM4_IRQHandler+0x5a>
		TIM4->SR &= ~TIM_SR_UIF;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <TIM4_IRQHandler+0x64>)
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	4a13      	ldr	r2, [pc, #76]	@ (800046c <TIM4_IRQHandler+0x64>)
 800041e:	f023 0301 	bic.w	r3, r3, #1
 8000422:	6113      	str	r3, [r2, #16]
		GPIOD->ODR |= (1U << LED15);
 8000424:	4b12      	ldr	r3, [pc, #72]	@ (8000470 <TIM4_IRQHandler+0x68>)
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	4a11      	ldr	r2, [pc, #68]	@ (8000470 <TIM4_IRQHandler+0x68>)
 800042a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800042e:	6153      	str	r3, [r2, #20]

		// sample PA0 button
		if ((GPIOA->IDR & (1UL << PA0)) != 0) { // is button high?
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <TIM4_IRQHandler+0x6c>)
 8000432:	691b      	ldr	r3, [r3, #16]
 8000434:	f003 0301 	and.w	r3, r3, #1
 8000438:	2b00      	cmp	r3, #0
 800043a:	d00f      	beq.n	800045c <TIM4_IRQHandler+0x54>
			if (counter++ >= 4) {
 800043c:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <TIM4_IRQHandler+0x70>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	b2d1      	uxtb	r1, r2
 8000446:	4a0c      	ldr	r2, [pc, #48]	@ (8000478 <TIM4_IRQHandler+0x70>)
 8000448:	7011      	strb	r1, [r2, #0]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d909      	bls.n	8000462 <TIM4_IRQHandler+0x5a>
				pressed = 1;
 800044e:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <TIM4_IRQHandler+0x74>)
 8000450:	2201      	movs	r2, #1
 8000452:	701a      	strb	r2, [r3, #0]
				counter = 0;
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <TIM4_IRQHandler+0x70>)
 8000456:	2200      	movs	r2, #0
 8000458:	701a      	strb	r2, [r3, #0]
			}
		} else {
			counter = 0;
		}
	}
}
 800045a:	e002      	b.n	8000462 <TIM4_IRQHandler+0x5a>
			counter = 0;
 800045c:	4b06      	ldr	r3, [pc, #24]	@ (8000478 <TIM4_IRQHandler+0x70>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr
 800046c:	40000800 	.word	0x40000800
 8000470:	40020c00 	.word	0x40020c00
 8000474:	40020000 	.word	0x40020000
 8000478:	2000001c 	.word	0x2000001c
 800047c:	2000001d 	.word	0x2000001d

08000480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000480:	480d      	ldr	r0, [pc, #52]	@ (80004b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000482:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000484:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000488:	480c      	ldr	r0, [pc, #48]	@ (80004bc <LoopForever+0x6>)
  ldr r1, =_edata
 800048a:	490d      	ldr	r1, [pc, #52]	@ (80004c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800048c:	4a0d      	ldr	r2, [pc, #52]	@ (80004c4 <LoopForever+0xe>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000490:	e002      	b.n	8000498 <LoopCopyDataInit>

08000492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000496:	3304      	adds	r3, #4

08000498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800049a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800049c:	d3f9      	bcc.n	8000492 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800049e:	4a0a      	ldr	r2, [pc, #40]	@ (80004c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004a0:	4c0a      	ldr	r4, [pc, #40]	@ (80004cc <LoopForever+0x16>)
  movs r3, #0
 80004a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004a4:	e001      	b.n	80004aa <LoopFillZerobss>

080004a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a8:	3204      	adds	r2, #4

080004aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ac:	d3fb      	bcc.n	80004a6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ae:	f000 f811 	bl	80004d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004b2:	f7ff fed1 	bl	8000258 <main>

080004b6 <LoopForever>:

LoopForever:
  b LoopForever
 80004b6:	e7fe      	b.n	80004b6 <LoopForever>
  ldr   r0, =_estack
 80004b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004c0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004c4:	0800053c 	.word	0x0800053c
  ldr r2, =_sbss
 80004c8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004cc:	20000020 	.word	0x20000020

080004d0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004d0:	e7fe      	b.n	80004d0 <ADC_IRQHandler>
	...

080004d4 <__libc_init_array>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	4d0d      	ldr	r5, [pc, #52]	@ (800050c <__libc_init_array+0x38>)
 80004d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000510 <__libc_init_array+0x3c>)
 80004da:	1b64      	subs	r4, r4, r5
 80004dc:	10a4      	asrs	r4, r4, #2
 80004de:	2600      	movs	r6, #0
 80004e0:	42a6      	cmp	r6, r4
 80004e2:	d109      	bne.n	80004f8 <__libc_init_array+0x24>
 80004e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000514 <__libc_init_array+0x40>)
 80004e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000518 <__libc_init_array+0x44>)
 80004e8:	f000 f818 	bl	800051c <_init>
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	10a4      	asrs	r4, r4, #2
 80004f0:	2600      	movs	r6, #0
 80004f2:	42a6      	cmp	r6, r4
 80004f4:	d105      	bne.n	8000502 <__libc_init_array+0x2e>
 80004f6:	bd70      	pop	{r4, r5, r6, pc}
 80004f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004fc:	4798      	blx	r3
 80004fe:	3601      	adds	r6, #1
 8000500:	e7ee      	b.n	80004e0 <__libc_init_array+0xc>
 8000502:	f855 3b04 	ldr.w	r3, [r5], #4
 8000506:	4798      	blx	r3
 8000508:	3601      	adds	r6, #1
 800050a:	e7f2      	b.n	80004f2 <__libc_init_array+0x1e>
 800050c:	08000534 	.word	0x08000534
 8000510:	08000534 	.word	0x08000534
 8000514:	08000534 	.word	0x08000534
 8000518:	08000538 	.word	0x08000538

0800051c <_init>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr

08000528 <_fini>:
 8000528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052a:	bf00      	nop
 800052c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052e:	bc08      	pop	{r3}
 8000530:	469e      	mov	lr, r3
 8000532:	4770      	bx	lr
