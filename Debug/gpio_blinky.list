
gpio_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000500  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000688  08000690  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000688  08000688  00001690  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000688  08000688  00001690  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000688  08000690  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000688  08000688  00001688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800068c  0800068c  0000168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001690  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b53  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020d  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000090  00000000  00000000  00002420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  000024b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001814f  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000007fe  00000000  00000000  0001a663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088411  00000000  00000000  0001ae61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a3272  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000194  00000000  00000000  000a32b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a344c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000670 	.word	0x08000670

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000670 	.word	0x08000670

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:
static void GPIOA_Init(void);
static void GPIOD_Init(void);
static void TIMx_Init(TIM_TypeDef *TIMx, IRQn_Type irqn, uint16_t psc, uint32_t arr);

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b088      	sub	sp, #32
 800025c:	af00      	add	r7, sp, #0
	uint16_t TIM4_PSC = 1343;
 800025e:	f240 533f 	movw	r3, #1343	@ 0x53f
 8000262:	83fb      	strh	r3, [r7, #30]
	uint32_t TIM4_ARR = 31249;
 8000264:	f647 2311 	movw	r3, #31249	@ 0x7a11
 8000268:	61bb      	str	r3, [r7, #24]

	uint32_t TIM2_ARR = 30000;
 800026a:	f247 5330 	movw	r3, #30000	@ 0x7530
 800026e:	617b      	str	r3, [r7, #20]
	uint16_t TIM2_PSC = 1200;
 8000270:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000274:	827b      	strh	r3, [r7, #18]

	uint16_t TIM3_PSC = 1100;
 8000276:	f240 434c 	movw	r3, #1100	@ 0x44c
 800027a:	823b      	strh	r3, [r7, #16]
	uint32_t TIM3_ARR = 31000;
 800027c:	f647 1318 	movw	r3, #31000	@ 0x7918
 8000280:	60fb      	str	r3, [r7, #12]

	uint16_t TIM5_PSC = 1000;
 8000282:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000286:	817b      	strh	r3, [r7, #10]
	uint32_t TIM5_ARR = 31500;
 8000288:	f647 330c 	movw	r3, #31500	@ 0x7b0c
 800028c:	607b      	str	r3, [r7, #4]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 800028e:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <main+0xc8>)
 8000290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000292:	4a23      	ldr	r2, [pc, #140]	@ (8000320 <main+0xc8>)
 8000294:	f043 0309 	orr.w	r3, r3, #9
 8000298:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN | RCC_APB1ENR_TIM2EN | RCC_APB1ENR_TIM3EN | RCC_APB1ENR_TIM5EN;
 800029a:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <main+0xc8>)
 800029c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800029e:	4a20      	ldr	r2, [pc, #128]	@ (8000320 <main+0xc8>)
 80002a0:	f043 030f 	orr.w	r3, r3, #15
 80002a4:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA_Init();
 80002a6:	f000 f843 	bl	8000330 <GPIOA_Init>
	GPIOD_Init();
 80002aa:	f000 f85d 	bl	8000368 <GPIOD_Init>

	TIMx_Init(TIM2, TIM2_IRQn, TIM2_PSC, TIM2_ARR);  // Init TIM2
 80002ae:	8a7a      	ldrh	r2, [r7, #18]
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	211c      	movs	r1, #28
 80002b4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80002b8:	f000 f8d8 	bl	800046c <TIMx_Init>
	TIMx_Init(TIM3, TIM3_IRQn, TIM3_PSC, TIM3_ARR);  // Init TIM3
 80002bc:	8a3a      	ldrh	r2, [r7, #16]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	211d      	movs	r1, #29
 80002c2:	4818      	ldr	r0, [pc, #96]	@ (8000324 <main+0xcc>)
 80002c4:	f000 f8d2 	bl	800046c <TIMx_Init>
	TIMx_Init(TIM4, TIM4_IRQn, TIM4_PSC, TIM4_ARR);  // Init TIM4
 80002c8:	8bfa      	ldrh	r2, [r7, #30]
 80002ca:	69bb      	ldr	r3, [r7, #24]
 80002cc:	211e      	movs	r1, #30
 80002ce:	4816      	ldr	r0, [pc, #88]	@ (8000328 <main+0xd0>)
 80002d0:	f000 f8cc 	bl	800046c <TIMx_Init>
	TIMx_Init(TIM5, TIM5_IRQn, TIM5_PSC, TIM5_ARR);  // Init TIM5
 80002d4:	897a      	ldrh	r2, [r7, #10]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2132      	movs	r1, #50	@ 0x32
 80002da:	4814      	ldr	r0, [pc, #80]	@ (800032c <main+0xd4>)
 80002dc:	f000 f8c6 	bl	800046c <TIMx_Init>

	/* Loop until the update event flag is set*/
	while (
 80002e0:	bf00      	nop
			((TIM4->SR & TIM_SR_UIF) == 0) &&
 80002e2:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <main+0xd0>)
 80002e4:	691b      	ldr	r3, [r3, #16]
 80002e6:	f003 0301 	and.w	r3, r3, #1
			((TIM2->SR & TIM_SR_UIF) == 0) &&
			((TIM3->SR & TIM_SR_UIF) == 0) &&
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d112      	bne.n	8000314 <main+0xbc>
			((TIM2->SR & TIM_SR_UIF) == 0) &&
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f003 0301 	and.w	r3, r3, #1
			((TIM4->SR & TIM_SR_UIF) == 0) &&
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10b      	bne.n	8000314 <main+0xbc>
			((TIM3->SR & TIM_SR_UIF) == 0) &&
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <main+0xcc>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	f003 0301 	and.w	r3, r3, #1
			((TIM2->SR & TIM_SR_UIF) == 0) &&
 8000304:	2b00      	cmp	r3, #0
 8000306:	d105      	bne.n	8000314 <main+0xbc>
			((TIM5->SR & TIM_SR_UIF) == 0)
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <main+0xd4>)
 800030a:	691b      	ldr	r3, [r3, #16]
 800030c:	f003 0301 	and.w	r3, r3, #1
			((TIM3->SR & TIM_SR_UIF) == 0) &&
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0e6      	beq.n	80002e2 <main+0x8a>
 8000314:	2300      	movs	r3, #0
	);
}
 8000316:	4618      	mov	r0, r3
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40000400 	.word	0x40000400
 8000328:	40000800 	.word	0x40000800
 800032c:	40000c00 	.word	0x40000c00

08000330 <GPIOA_Init>:

/* PA0 input with pull down */
static void GPIOA_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3UL << (PA0 * 2));
 8000334:	4b0b      	ldr	r3, [pc, #44]	@ (8000364 <GPIOA_Init+0x34>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a0a      	ldr	r2, [pc, #40]	@ (8000364 <GPIOA_Init+0x34>)
 800033a:	f023 0303 	bic.w	r3, r3, #3
 800033e:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3UL << (PA0 * 2));
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <GPIOA_Init+0x34>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a07      	ldr	r2, [pc, #28]	@ (8000364 <GPIOA_Init+0x34>)
 8000346:	f023 0303 	bic.w	r3, r3, #3
 800034a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (2UL << (PA0 * 2));
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <GPIOA_Init+0x34>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <GPIOA_Init+0x34>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	60d3      	str	r3, [r2, #12]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40020000 	.word	0x40020000

08000368 <GPIOD_Init>:

/* PD15 output push-pull, low speed, no pull */
static void GPIOD_Init(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
    /* MODER: 01 = output for PD15 */
    GPIOD->MODER &= ~(3UL << (LED13 * 2));
 800036c:	4b3e      	ldr	r3, [pc, #248]	@ (8000468 <GPIOD_Init+0x100>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a3d      	ldr	r2, [pc, #244]	@ (8000468 <GPIOD_Init+0x100>)
 8000372:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000376:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (1UL << (LED13 * 2));
 8000378:	4b3b      	ldr	r3, [pc, #236]	@ (8000468 <GPIOD_Init+0x100>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a3a      	ldr	r2, [pc, #232]	@ (8000468 <GPIOD_Init+0x100>)
 800037e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000382:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1UL << LED13);
 8000384:	4b38      	ldr	r3, [pc, #224]	@ (8000468 <GPIOD_Init+0x100>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a37      	ldr	r2, [pc, #220]	@ (8000468 <GPIOD_Init+0x100>)
 800038a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800038e:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR &= ~(3UL << (LED13 * 2));
 8000390:	4b35      	ldr	r3, [pc, #212]	@ (8000468 <GPIOD_Init+0x100>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a34      	ldr	r2, [pc, #208]	@ (8000468 <GPIOD_Init+0x100>)
 8000396:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800039a:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3UL << (LED13 * 2));
 800039c:	4b32      	ldr	r3, [pc, #200]	@ (8000468 <GPIOD_Init+0x100>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a31      	ldr	r2, [pc, #196]	@ (8000468 <GPIOD_Init+0x100>)
 80003a2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80003a6:	60d3      	str	r3, [r2, #12]

    // LED15
	GPIOD->MODER   &= ~(3UL << (LED15 * 2));
 80003a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000468 <GPIOD_Init+0x100>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000468 <GPIOD_Init+0x100>)
 80003ae:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED15 * 2));
 80003b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000468 <GPIOD_Init+0x100>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a2b      	ldr	r2, [pc, #172]	@ (8000468 <GPIOD_Init+0x100>)
 80003ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003be:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED15);
 80003c0:	4b29      	ldr	r3, [pc, #164]	@ (8000468 <GPIOD_Init+0x100>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a28      	ldr	r2, [pc, #160]	@ (8000468 <GPIOD_Init+0x100>)
 80003c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003ca:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED15 * 2));
 80003cc:	4b26      	ldr	r3, [pc, #152]	@ (8000468 <GPIOD_Init+0x100>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a25      	ldr	r2, [pc, #148]	@ (8000468 <GPIOD_Init+0x100>)
 80003d2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80003d6:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED15 * 2));
 80003d8:	4b23      	ldr	r3, [pc, #140]	@ (8000468 <GPIOD_Init+0x100>)
 80003da:	68db      	ldr	r3, [r3, #12]
 80003dc:	4a22      	ldr	r2, [pc, #136]	@ (8000468 <GPIOD_Init+0x100>)
 80003de:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80003e2:	60d3      	str	r3, [r2, #12]

	// LED12 --- This LED will blink 1/sec on TIM2
	GPIOD->MODER   &= ~(3UL << (LED12 * 2));
 80003e4:	4b20      	ldr	r3, [pc, #128]	@ (8000468 <GPIOD_Init+0x100>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a1f      	ldr	r2, [pc, #124]	@ (8000468 <GPIOD_Init+0x100>)
 80003ea:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED12 * 2));
 80003f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000468 <GPIOD_Init+0x100>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000468 <GPIOD_Init+0x100>)
 80003f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80003fa:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED12);
 80003fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000468 <GPIOD_Init+0x100>)
 80003fe:	685b      	ldr	r3, [r3, #4]
 8000400:	4a19      	ldr	r2, [pc, #100]	@ (8000468 <GPIOD_Init+0x100>)
 8000402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000406:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED12 * 2));
 8000408:	4b17      	ldr	r3, [pc, #92]	@ (8000468 <GPIOD_Init+0x100>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4a16      	ldr	r2, [pc, #88]	@ (8000468 <GPIOD_Init+0x100>)
 800040e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000412:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED12 * 2));
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <GPIOD_Init+0x100>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	4a13      	ldr	r2, [pc, #76]	@ (8000468 <GPIOD_Init+0x100>)
 800041a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800041e:	60d3      	str	r3, [r2, #12]

	// LED15
	GPIOD->MODER   &= ~(3UL << (LED14 * 2));
 8000420:	4b11      	ldr	r3, [pc, #68]	@ (8000468 <GPIOD_Init+0x100>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a10      	ldr	r2, [pc, #64]	@ (8000468 <GPIOD_Init+0x100>)
 8000426:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800042a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED14 * 2));
 800042c:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <GPIOD_Init+0x100>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <GPIOD_Init+0x100>)
 8000432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000436:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED14);
 8000438:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <GPIOD_Init+0x100>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a0a      	ldr	r2, [pc, #40]	@ (8000468 <GPIOD_Init+0x100>)
 800043e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000442:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED14 * 2));
 8000444:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <GPIOD_Init+0x100>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <GPIOD_Init+0x100>)
 800044a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800044e:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED14 * 2));
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <GPIOD_Init+0x100>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	4a04      	ldr	r2, [pc, #16]	@ (8000468 <GPIOD_Init+0x100>)
 8000456:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800045a:	60d3      	str	r3, [r2, #12]
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40020c00 	.word	0x40020c00

0800046c <TIMx_Init>:

static void TIMx_Init(TIM_TypeDef *TIMx, IRQn_Type irqn, uint16_t psc, uint32_t arr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	60f8      	str	r0, [r7, #12]
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	72fb      	strb	r3, [r7, #11]
 800047a:	4613      	mov	r3, r2
 800047c:	813b      	strh	r3, [r7, #8]
	TIMx->CR1 &= ~TIM_CR1_CEN;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f023 0201 	bic.w	r2, r3, #1
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	601a      	str	r2, [r3, #0]

	TIMx->ARR = arr;
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIMx->PSC = psc;
 8000490:	893a      	ldrh	r2, [r7, #8]
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	629a      	str	r2, [r3, #40]	@ 0x28

	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_OPM);  // upcount, continuous
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f023 0218 	bic.w	r2, r3, #24
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	601a      	str	r2, [r3, #0]

	TIMx->EGR = TIM_EGR_UG;      // Load PSC/ARR now
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	2201      	movs	r2, #1
 80004a6:	615a      	str	r2, [r3, #20]
	TIMx->SR = 0;                // Clear flags
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
	TIMx->DIER |= TIM_DIER_UIE;  // update interrupt
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	f043 0201 	orr.w	r2, r3, #1
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(irqn, 15);
 80004ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80004be:	210f      	movs	r1, #15
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fe9f 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(irqn);
 80004c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fe7c 	bl	80001c8 <__NVIC_EnableIRQ>

	TIMx->CR1 |= TIM_CR1_CEN;   // Start counting
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f043 0201 	orr.w	r2, r3, #1
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	601a      	str	r2, [r3, #0]
}
 80004dc:	bf00      	nop
 80004de:	3710      	adds	r7, #16
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <TIM2_IRQHandler>:

/* TIM2 Interrupt handler */
void TIM2_IRQHandler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
	if (TIM2->SR & TIM_SR_UIF) {
 80004e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ec:	691b      	ldr	r3, [r3, #16]
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d00d      	beq.n	8000512 <TIM2_IRQHandler+0x2e>
		TIM2->SR &= ~TIM_SR_UIF;
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000500:	f023 0301 	bic.w	r3, r3, #1
 8000504:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= (1U << LED12);
 8000506:	4b05      	ldr	r3, [pc, #20]	@ (800051c <TIM2_IRQHandler+0x38>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a04      	ldr	r2, [pc, #16]	@ (800051c <TIM2_IRQHandler+0x38>)
 800050c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8000510:	6153      	str	r3, [r2, #20]
	}
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40020c00 	.word	0x40020c00

08000520 <TIM3_IRQHandler>:

/* TIM3 Interrupt handler */
void TIM3_IRQHandler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
	if (TIM3->SR & TIM_SR_UIF) {
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <TIM3_IRQHandler+0x34>)
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	f003 0301 	and.w	r3, r3, #1
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00b      	beq.n	8000548 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <TIM3_IRQHandler+0x34>)
 8000532:	691b      	ldr	r3, [r3, #16]
 8000534:	4a07      	ldr	r2, [pc, #28]	@ (8000554 <TIM3_IRQHandler+0x34>)
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= (1U << LED13);
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <TIM3_IRQHandler+0x38>)
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <TIM3_IRQHandler+0x38>)
 8000542:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000546:	6153      	str	r3, [r2, #20]
	}
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40000400 	.word	0x40000400
 8000558:	40020c00 	.word	0x40020c00

0800055c <TIM4_IRQHandler>:

/* TIM4 Interrupt handler */
void TIM4_IRQHandler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <TIM4_IRQHandler+0x34>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d00b      	beq.n	8000584 <TIM4_IRQHandler+0x28>
		TIM4->SR &= ~TIM_SR_UIF;
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <TIM4_IRQHandler+0x34>)
 800056e:	691b      	ldr	r3, [r3, #16]
 8000570:	4a07      	ldr	r2, [pc, #28]	@ (8000590 <TIM4_IRQHandler+0x34>)
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= (1U << LED15);
 8000578:	4b06      	ldr	r3, [pc, #24]	@ (8000594 <TIM4_IRQHandler+0x38>)
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <TIM4_IRQHandler+0x38>)
 800057e:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000582:	6153      	str	r3, [r2, #20]
	}
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40000800 	.word	0x40000800
 8000594:	40020c00 	.word	0x40020c00

08000598 <TIM5_IRQHandler>:

/* TIM5 Interrupt handler */
void TIM5_IRQHandler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	if (TIM5->SR & TIM_SR_UIF) {
 800059c:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <TIM5_IRQHandler+0x34>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d00b      	beq.n	80005c0 <TIM5_IRQHandler+0x28>
		TIM5->SR &= ~TIM_SR_UIF;
 80005a8:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <TIM5_IRQHandler+0x34>)
 80005aa:	691b      	ldr	r3, [r3, #16]
 80005ac:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <TIM5_IRQHandler+0x34>)
 80005ae:	f023 0301 	bic.w	r3, r3, #1
 80005b2:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= (1U << LED14);
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <TIM5_IRQHandler+0x38>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a05      	ldr	r2, [pc, #20]	@ (80005d0 <TIM5_IRQHandler+0x38>)
 80005ba:	f483 4380 	eor.w	r3, r3, #16384	@ 0x4000
 80005be:	6153      	str	r3, [r2, #20]
	}
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40000c00 	.word	0x40000c00
 80005d0:	40020c00 	.word	0x40020c00

080005d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <LoopForever+0x6>)
  ldr r1, =_edata
 80005de:	490d      	ldr	r1, [pc, #52]	@ (8000614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <LoopForever+0xe>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e4:	e002      	b.n	80005ec <LoopCopyDataInit>

080005e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ea:	3304      	adds	r3, #4

080005ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f0:	d3f9      	bcc.n	80005e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005f2:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000620 <LoopForever+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f8:	e001      	b.n	80005fe <LoopFillZerobss>

080005fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005fc:	3204      	adds	r2, #4

080005fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000600:	d3fb      	bcc.n	80005fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000602:	f000 f811 	bl	8000628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000606:	f7ff fe27 	bl	8000258 <main>

0800060a <LoopForever>:

LoopForever:
  b LoopForever
 800060a:	e7fe      	b.n	800060a <LoopForever>
  ldr   r0, =_estack
 800060c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000614:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000618:	08000690 	.word	0x08000690
  ldr r2, =_sbss
 800061c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000620:	2000001c 	.word	0x2000001c

08000624 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000624:	e7fe      	b.n	8000624 <ADC_IRQHandler>
	...

08000628 <__libc_init_array>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	4d0d      	ldr	r5, [pc, #52]	@ (8000660 <__libc_init_array+0x38>)
 800062c:	4c0d      	ldr	r4, [pc, #52]	@ (8000664 <__libc_init_array+0x3c>)
 800062e:	1b64      	subs	r4, r4, r5
 8000630:	10a4      	asrs	r4, r4, #2
 8000632:	2600      	movs	r6, #0
 8000634:	42a6      	cmp	r6, r4
 8000636:	d109      	bne.n	800064c <__libc_init_array+0x24>
 8000638:	4d0b      	ldr	r5, [pc, #44]	@ (8000668 <__libc_init_array+0x40>)
 800063a:	4c0c      	ldr	r4, [pc, #48]	@ (800066c <__libc_init_array+0x44>)
 800063c:	f000 f818 	bl	8000670 <_init>
 8000640:	1b64      	subs	r4, r4, r5
 8000642:	10a4      	asrs	r4, r4, #2
 8000644:	2600      	movs	r6, #0
 8000646:	42a6      	cmp	r6, r4
 8000648:	d105      	bne.n	8000656 <__libc_init_array+0x2e>
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000650:	4798      	blx	r3
 8000652:	3601      	adds	r6, #1
 8000654:	e7ee      	b.n	8000634 <__libc_init_array+0xc>
 8000656:	f855 3b04 	ldr.w	r3, [r5], #4
 800065a:	4798      	blx	r3
 800065c:	3601      	adds	r6, #1
 800065e:	e7f2      	b.n	8000646 <__libc_init_array+0x1e>
 8000660:	08000688 	.word	0x08000688
 8000664:	08000688 	.word	0x08000688
 8000668:	08000688 	.word	0x08000688
 800066c:	0800068c 	.word	0x0800068c

08000670 <_init>:
 8000670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000672:	bf00      	nop
 8000674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000676:	bc08      	pop	{r3}
 8000678:	469e      	mov	lr, r3
 800067a:	4770      	bx	lr

0800067c <_fini>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	bf00      	nop
 8000680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000682:	bc08      	pop	{r3}
 8000684:	469e      	mov	lr, r3
 8000686:	4770      	bx	lr
