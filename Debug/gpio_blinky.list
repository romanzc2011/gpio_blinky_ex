
gpio_blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000398  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000520  08000528  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000520  08000520  00001528  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000520  08000520  00001528  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000520  08000528  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00001520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001528  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ad7  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000020b  00000000  00000000  0000202f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00002240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000051  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001814f  00000000  00000000  00002309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000745  00000000  00000000  0001a458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000883ab  00000000  00000000  0001ab9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000a2f48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000134  00000000  00000000  000a2f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000a30c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000508 	.word	0x08000508

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000508 	.word	0x08000508

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	6039      	str	r1, [r7, #0]
 800020e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	2b00      	cmp	r3, #0
 8000216:	db0a      	blt.n	800022e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	b2da      	uxtb	r2, r3
 800021c:	490c      	ldr	r1, [pc, #48]	@ (8000250 <__NVIC_SetPriority+0x4c>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	0112      	lsls	r2, r2, #4
 8000224:	b2d2      	uxtb	r2, r2
 8000226:	440b      	add	r3, r1
 8000228:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800022c:	e00a      	b.n	8000244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	b2da      	uxtb	r2, r3
 8000232:	4908      	ldr	r1, [pc, #32]	@ (8000254 <__NVIC_SetPriority+0x50>)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	3b04      	subs	r3, #4
 800023c:	0112      	lsls	r2, r2, #4
 800023e:	b2d2      	uxtb	r2, r2
 8000240:	440b      	add	r3, r1
 8000242:	761a      	strb	r2, [r3, #24]
}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	e000e100 	.word	0xe000e100
 8000254:	e000ed00 	.word	0xe000ed00

08000258 <main>:
static void GPIOA_Init(void);
static void GPIOD_Init(void);
static void TIMx_Init(TIM_TypeDef *TIMx, IRQn_Type irqn, uint16_t psc, uint32_t arr);

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	uint16_t TIM4_PSC = 1343;
 800025e:	f240 533f 	movw	r3, #1343	@ 0x53f
 8000262:	80fb      	strh	r3, [r7, #6]
	uint32_t TIM4_ARR = 31249;
 8000264:	f647 2311 	movw	r3, #31249	@ 0x7a11
 8000268:	603b      	str	r3, [r7, #0]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIODEN;
 800026a:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <main+0x58>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	4a10      	ldr	r2, [pc, #64]	@ (80002b0 <main+0x58>)
 8000270:	f043 0309 	orr.w	r3, r3, #9
 8000274:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN | RCC_APB1ENR_TIM2EN;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <main+0x58>)
 8000278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027a:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <main+0x58>)
 800027c:	f043 0305 	orr.w	r3, r3, #5
 8000280:	6413      	str	r3, [r2, #64]	@ 0x40

	GPIOA_Init();
 8000282:	f000 f819 	bl	80002b8 <GPIOA_Init>
	GPIOD_Init();
 8000286:	f000 f833 	bl	80002f0 <GPIOD_Init>

	TIMx_Init(TIM4, TIM4_IRQn, TIM4_PSC, TIM4_ARR);  // Init TIM4
 800028a:	88fa      	ldrh	r2, [r7, #6]
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	211e      	movs	r1, #30
 8000290:	4808      	ldr	r0, [pc, #32]	@ (80002b4 <main+0x5c>)
 8000292:	f000 f891 	bl	80003b8 <TIMx_Init>

	/* Loop until the update event flag is set*/
	while (!(TIM4->SR & TIM_SR_UIF) != 0);
 8000296:	bf00      	nop
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <main+0x5c>)
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <main+0x40>
 80002a4:	2300      	movs	r3, #0
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40000800 	.word	0x40000800

080002b8 <GPIOA_Init>:

/* PA0 input with pull down */
static void GPIOA_Init(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(3UL << (PA0 * 2));
 80002bc:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <GPIOA_Init+0x34>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a0a      	ldr	r2, [pc, #40]	@ (80002ec <GPIOA_Init+0x34>)
 80002c2:	f023 0303 	bic.w	r3, r3, #3
 80002c6:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(3UL << (PA0 * 2));
 80002c8:	4b08      	ldr	r3, [pc, #32]	@ (80002ec <GPIOA_Init+0x34>)
 80002ca:	68db      	ldr	r3, [r3, #12]
 80002cc:	4a07      	ldr	r2, [pc, #28]	@ (80002ec <GPIOA_Init+0x34>)
 80002ce:	f023 0303 	bic.w	r3, r3, #3
 80002d2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |=  (2UL << (PA0 * 2));
 80002d4:	4b05      	ldr	r3, [pc, #20]	@ (80002ec <GPIOA_Init+0x34>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a04      	ldr	r2, [pc, #16]	@ (80002ec <GPIOA_Init+0x34>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40020000 	.word	0x40020000

080002f0 <GPIOD_Init>:

/* PD15 output push-pull, low speed, no pull */
static void GPIOD_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    /* MODER: 01 = output for PD15 */
    GPIOD->MODER &= ~(3UL << (LED13 * 2));
 80002f4:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <GPIOD_Init+0xc4>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a2e      	ldr	r2, [pc, #184]	@ (80003b4 <GPIOD_Init+0xc4>)
 80002fa:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80002fe:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (1UL << (LED13 * 2));
 8000300:	4b2c      	ldr	r3, [pc, #176]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a2b      	ldr	r2, [pc, #172]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1UL << LED13);
 800030c:	4b29      	ldr	r3, [pc, #164]	@ (80003b4 <GPIOD_Init+0xc4>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a28      	ldr	r2, [pc, #160]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000312:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000316:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR &= ~(3UL << (LED13 * 2));
 8000318:	4b26      	ldr	r3, [pc, #152]	@ (80003b4 <GPIOD_Init+0xc4>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a25      	ldr	r2, [pc, #148]	@ (80003b4 <GPIOD_Init+0xc4>)
 800031e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000322:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3UL << (LED13 * 2));
 8000324:	4b23      	ldr	r3, [pc, #140]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a22      	ldr	r2, [pc, #136]	@ (80003b4 <GPIOD_Init+0xc4>)
 800032a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800032e:	60d3      	str	r3, [r2, #12]

    // LED15
	GPIOD->MODER   &= ~(3UL << (LED15 * 2));
 8000330:	4b20      	ldr	r3, [pc, #128]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a1f      	ldr	r2, [pc, #124]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000336:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800033a:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED15 * 2));
 800033c:	4b1d      	ldr	r3, [pc, #116]	@ (80003b4 <GPIOD_Init+0xc4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1c      	ldr	r2, [pc, #112]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000346:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED15);
 8000348:	4b1a      	ldr	r3, [pc, #104]	@ (80003b4 <GPIOD_Init+0xc4>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	4a19      	ldr	r2, [pc, #100]	@ (80003b4 <GPIOD_Init+0xc4>)
 800034e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000352:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED15 * 2));
 8000354:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000356:	689b      	ldr	r3, [r3, #8]
 8000358:	4a16      	ldr	r2, [pc, #88]	@ (80003b4 <GPIOD_Init+0xc4>)
 800035a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800035e:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED15 * 2));
 8000360:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a13      	ldr	r2, [pc, #76]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000366:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800036a:	60d3      	str	r3, [r2, #12]

	// LED12 --- This LED will blink 1/sec on TIM2
	GPIOD->MODER   &= ~(3UL << (LED12 * 2));
 800036c:	4b11      	ldr	r3, [pc, #68]	@ (80003b4 <GPIOD_Init+0xc4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a10      	ldr	r2, [pc, #64]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000372:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000376:	6013      	str	r3, [r2, #0]
	GPIOD->MODER   |=  (1UL << (LED12 * 2));
 8000378:	4b0e      	ldr	r3, [pc, #56]	@ (80003b4 <GPIOD_Init+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <GPIOD_Init+0xc4>)
 800037e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000382:	6013      	str	r3, [r2, #0]
	GPIOD->OTYPER  &= ~(1UL << LED12);
 8000384:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <GPIOD_Init+0xc4>)
 800038a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800038e:	6053      	str	r3, [r2, #4]
	GPIOD->OSPEEDR &= ~(3UL << (LED12 * 2));
 8000390:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	4a07      	ldr	r2, [pc, #28]	@ (80003b4 <GPIOD_Init+0xc4>)
 8000396:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800039a:	6093      	str	r3, [r2, #8]
	GPIOD->PUPDR   &= ~(3UL << (LED12 * 2));
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <GPIOD_Init+0xc4>)
 800039e:	68db      	ldr	r3, [r3, #12]
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <GPIOD_Init+0xc4>)
 80003a2:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80003a6:	60d3      	str	r3, [r2, #12]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40020c00 	.word	0x40020c00

080003b8 <TIMx_Init>:

static void TIMx_Init(TIM_TypeDef *TIMx, IRQn_Type irqn, uint16_t psc, uint32_t arr)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b084      	sub	sp, #16
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	72fb      	strb	r3, [r7, #11]
 80003c6:	4613      	mov	r3, r2
 80003c8:	813b      	strh	r3, [r7, #8]
	TIMx->CR1 &= ~TIM_CR1_CEN;
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f023 0201 	bic.w	r2, r3, #1
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	601a      	str	r2, [r3, #0]

	TIMx->ARR = arr;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIMx->PSC = psc;
 80003dc:	893a      	ldrh	r2, [r7, #8]
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	629a      	str	r2, [r3, #40]	@ 0x28

	TIMx->CR1 &= ~(TIM_CR1_DIR | TIM_CR1_OPM);  // upcount, continuous
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f023 0218 	bic.w	r2, r3, #24
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	601a      	str	r2, [r3, #0]

	TIMx->EGR = TIM_EGR_UG;      // Load PSC/ARR now
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	2201      	movs	r2, #1
 80003f2:	615a      	str	r2, [r3, #20]
	TIMx->SR = 0;                // Clear flags
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
	TIMx->DIER |= TIM_DIER_UIE;  // update interrupt
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	f043 0201 	orr.w	r2, r3, #1
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	60da      	str	r2, [r3, #12]

	NVIC_SetPriority(irqn, 15);
 8000406:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800040a:	210f      	movs	r1, #15
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff fef9 	bl	8000204 <__NVIC_SetPriority>
	NVIC_EnableIRQ(irqn);
 8000412:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff fed6 	bl	80001c8 <__NVIC_EnableIRQ>

	TIMx->CR1 |= TIM_CR1_CEN;   // Start counting
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	f043 0201 	orr.w	r2, r3, #1
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	3710      	adds	r7, #16
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}

08000430 <TIM4_IRQHandler>:

/* TIM4 Interrupt handler */
void TIM4_IRQHandler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	if (TIM4->SR & TIM_SR_UIF) {
 8000434:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <TIM4_IRQHandler+0x34>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	f003 0301 	and.w	r3, r3, #1
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00b      	beq.n	8000458 <TIM4_IRQHandler+0x28>
		TIM4->SR &= ~TIM_SR_UIF;
 8000440:	4b08      	ldr	r3, [pc, #32]	@ (8000464 <TIM4_IRQHandler+0x34>)
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	4a07      	ldr	r2, [pc, #28]	@ (8000464 <TIM4_IRQHandler+0x34>)
 8000446:	f023 0301 	bic.w	r3, r3, #1
 800044a:	6113      	str	r3, [r2, #16]
		GPIOD->ODR ^= (1U << LED15);
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <TIM4_IRQHandler+0x38>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <TIM4_IRQHandler+0x38>)
 8000452:	f483 4300 	eor.w	r3, r3, #32768	@ 0x8000
 8000456:	6153      	str	r3, [r2, #20]
	}
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40000800 	.word	0x40000800
 8000468:	40020c00 	.word	0x40020c00

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	@ (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	@ (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	@ (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	@ (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f811 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff fedb 	bl	8000258 <main>

080004a2 <LoopForever>:

LoopForever:
  b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b0:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b8:	2000001c 	.word	0x2000001c

080004bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4d0d      	ldr	r5, [pc, #52]	@ (80004f8 <__libc_init_array+0x38>)
 80004c4:	4c0d      	ldr	r4, [pc, #52]	@ (80004fc <__libc_init_array+0x3c>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	2600      	movs	r6, #0
 80004cc:	42a6      	cmp	r6, r4
 80004ce:	d109      	bne.n	80004e4 <__libc_init_array+0x24>
 80004d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000500 <__libc_init_array+0x40>)
 80004d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000504 <__libc_init_array+0x44>)
 80004d4:	f000 f818 	bl	8000508 <_init>
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	2600      	movs	r6, #0
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d105      	bne.n	80004ee <__libc_init_array+0x2e>
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
 80004e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e8:	4798      	blx	r3
 80004ea:	3601      	adds	r6, #1
 80004ec:	e7ee      	b.n	80004cc <__libc_init_array+0xc>
 80004ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f2:	4798      	blx	r3
 80004f4:	3601      	adds	r6, #1
 80004f6:	e7f2      	b.n	80004de <__libc_init_array+0x1e>
 80004f8:	08000520 	.word	0x08000520
 80004fc:	08000520 	.word	0x08000520
 8000500:	08000520 	.word	0x08000520
 8000504:	08000524 	.word	0x08000524

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <_fini>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr
